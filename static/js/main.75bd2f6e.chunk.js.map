{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useEffect","shareButton","document","querySelector","shareDialog","closeButton","addEventListener","event","navigator","share","title","url","window","location","href","then","console","log","catch","error","classList","add","remove","className","class","type","id","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","points","x1","y1","x2","y2","x","y","width","height","rx","ry","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"2OAsFeA,MAnFf,WA0BE,OAzBAC,qBAAU,WACR,IAAMC,EAAcC,SAASC,cAAc,iBACrCC,EAAcF,SAASC,cAAc,iBACrCE,EAAcH,SAASC,cAAc,iBAC3CF,EAAYK,iBAAiB,SAAS,SAACC,GACjCC,UAAUC,MACZD,UACGC,MAAM,CACLC,MAAO,oBACPC,IAAKC,OAAOC,SAASC,OAEtBC,MAAK,WACJC,QAAQC,IAAI,0BAEbC,MAAMF,QAAQG,OAEjBf,EAAYgB,UAAUC,IAAI,cAI9BhB,EAAYC,iBAAiB,SAAS,SAACC,GACrCH,EAAYgB,UAAUE,OAAO,gBAE9B,IAGD,yBAAKC,UAAU,OACb,yBAAKC,MAAM,gBACT,gCACE,wBAAIA,MAAM,gBAAV,oDAGA,4BAAQA,MAAM,gBACZ,6BACE,yBAAKV,KAAK,eAMlB,4BAAQU,MAAM,eAAeC,KAAK,SAASf,MAAM,sBAC/C,6BACE,yBAAKI,KAAK,iBAEZ,wCAEF,yBAAKU,MAAM,UACT,8BACE,4BACEE,GAAG,aACHC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,QAChBR,MAAM,yBAEN,0BAAMS,EAAE,8CACR,8BAAUC,OAAO,kBACjB,0BAAMC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,QAElC,4BACEZ,GAAG,QACHC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,QAChBR,MAAM,4BAEN,0BAAMe,EAAE,IAAIC,EAAE,IAAIC,MAAM,KAAKC,OAAO,KAAKC,GAAG,IAAIC,GAAG,MACnD,0BAAMT,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,OAC/B,0BAAMH,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,YClEvBO,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDyHpB,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMqC,c","file":"static/js/main.75bd2f6e.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    const shareButton = document.querySelector(\".share-button\");\n    const shareDialog = document.querySelector(\".share-dialog\");\n    const closeButton = document.querySelector(\".close-button\");\n    shareButton.addEventListener(\"click\", (event) => {\n      if (navigator.share) {\n        navigator\n          .share({\n            title: \"WebShare API Demo\",\n            url: window.location.href,\n          })\n          .then(() => {\n            console.log(\"Thanks for sharing!\");\n          })\n          .catch(console.error);\n      } else {\n        shareDialog.classList.add(\"is-open\");\n      }\n    });\n\n    closeButton.addEventListener(\"click\", (event) => {\n      shareDialog.classList.remove(\"is-open\");\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div class=\"share-dialog\">\n        <header>\n          <h3 class=\"dialog-title\">\n            To Share it on We Chat, use broswer share option\n          </h3>\n          <button class=\"close-button\">\n            <svg>\n              <use href=\"#close\"></use>\n            </svg>\n          </button>\n        </header>\n      </div>\n\n      <button class=\"share-button\" type=\"button\" title=\"Share this article\">\n        <svg>\n          <use href=\"#share-icon\"></use>\n        </svg>\n        <span>Share</span>\n      </button>\n      <svg class=\"hidden\">\n        <defs>\n          <symbol\n            id=\"share-icon\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"feather feather-share\"\n          >\n            <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\"></path>\n            <polyline points=\"16 6 12 2 8 6\"></polyline>\n            <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"15\"></line>\n          </symbol>\n          <symbol\n            id=\"close\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"feather feather-x-square\"\n          >\n            <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n          </symbol>\n        </defs>\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}